@using Entities
@using Business


<EditForm Model="storage">

    <div class="form-group">
        <label>Bodega:</label>
        <InputSelect @bind-Value="storage.WerehouseId" class="form-control" >
            <option value="">Seleccione...</option>
            @foreach (var item in werehouses)
            {
                <option value="@item.WerehouseId">@item.WerehouseName</option>
            }
        </InputSelect>
    </div>

    <div class="form-group">
        <label>Producto:</label>
        <InputSelect @bind-Value="storage.ProductId" class="form-control">
            <option value="">Seleccione...</option>
            @foreach (var item in products)
            {
                <option value="@item.ProductId">@item.ProductName</option>
            }
        </InputSelect>
    </div>
    
    <div class="form-group">
        <input type="button" class="btn btn-outline-primary" value="Guardar" @onclick="SaveStorage" />
    </div>
</EditForm>
<div class="text-center h4">
    @message
</div>

@code {
    StorageEntity storage = new StorageEntity();

    List<WerehouseEntity> werehouses = new List<WerehouseEntity>();
    List<ProductEntity> products = new List<ProductEntity>();

    string message;

    protected override async Task OnInitializedAsync()
    {
        werehouses = BusinessWereHouse.WereHouseList();
        products = BusinessProduct.ProductList();
    }

    private void SaveStorage() {

        storage.StoregeId = $"{storage.WerehouseId}-{storage.ProductId}";
        if (!BusinessStorage.IsProductOnWerehouse(storage.StoregeId))
        {
            storage.LastUpdate = DateTime.Now;
            BusinessStorage.StorageInsert(storage);
            message = "producto registrado";

            CleanControls();
        }
        else {
            message = "producto ya existe en la bodega";
        }
    }

    private void CleanControls() {
        storage.WerehouseId = string.Empty;
        storage.ProductId = string.Empty;
    }

}
